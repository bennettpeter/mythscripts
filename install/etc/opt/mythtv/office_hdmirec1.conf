[default]
# Settings for fire stick recorder
# ANDROID_DEVICE: the ip address, dnsname, or host id of the fire stick
# VIDEO_IN: If you only have one fire recorder you can add it here.
# If you have two or more you should let the system dynamically
# set this up by running hdmirec_scan.sh after a reboot or replugging
# of USB recorder. You can also use that script with one recorder.
# If you don't want to use the dynamic script do as follows:
# Find the correct video device (/dev/videoX) with
# v4l2-ctl --list-devices.
# Each device has 2 ids. Make sure to use the first (even numbered)
# id of the two. If your computer has a camera as well as a capture
# device you need to make sure to choose the correct one.
# INPUT_FORMAT:
# ffmpeg -hide_banner -f v4l2 -list_formats all -i /dev/videoX
# Preferably choose a format with Compressed (mjpeg). Raw formats will
# be too slow.
# RESULUTION: Choose a video_size that goes with the format listed.
# AUDIO_IN:  If using dynamic set up (hdmiec_scan.sh do not set this up.
# If you have only one tuner and not using hdmirec_scan,sh do as follows:
# pacmd list-sources|grep alsa_input
# Choose alsa_input.XXX that is associated with your capture device
# and not your audio card / microphone.
# FRAMERATE: Use
# v4l2-ctl --device=/dev/videoX --list-formats-ext | less
# This will give a list of possible framerates for each video_size
# and input_fornmat. You will see the framerate is much lower for
# raw format than for mjpeg.
# Set your fire tv device to use the specified resolution by
# connecting it to a TV and selecting the resolution using the
# android settings.

ANDROID_DEVICE=fire-eth
# If you do not use hdmirec_scan you can specify VIDEO_IN and AUDIO_IN
# here.
#VIDEO_IN=/dev/video2
#AUDIO_IN=hw:2,0
RESOLUTION=1280x720
FRAMERATE=60
INPUT_FORMAT=mjpeg
# If your recordings have audio sync problems, fix them during
# recording by specifying audio offset in seconds (default 0.000)
AUDIO_OFFSET=0.200

[RECORDER]
# The recorder command to execute.  %URL% is optional, and
# will be replaced with the channel's "URL" as defined in the
# [TUNER/channels] (channel conf) configuration file
command=/opt/mythtv/bin/hdmirec_encode.sh hdmirec1

# Optional cleanup command which is executed when this recorder is shut down
cleanup=/opt/mythtv/bin/hdmirec_finished.sh hdmirec1

# Used in logging events
desc=External Recorder hdmirec1

[TUNER]
# An optional CONF file which provides channel details.
#channels=ffmpeg-channels.conf

# If [TUNER/command] is provided, it will be executed to "tune" the
# channel. A %URL% parameter will be substituted with the "URL" as
# defined in the [TUNER/channels] configuration file. %CHANNUM%
# will be replaced with the channum provided by mythbackend.
command=/opt/mythtv/bin/hdmirec_tune.sh hdmirec1 %CHANNUM%

# If [TUNER/ondatastart] is provided, it will be executed as soon
# as data is seen from the [RECORDER/command] stdout. This can be
# used to do any final cleanup of the tunning operation.
#ondatastart="/home/mythtv/bin/control.py --leftplay 2"

# if [TUNER/newepisodecommand] is provided, it will be executed
# if a new episoded is starting up on the channel that is already
# tuned. In other words, if [TUNER/command] is skipped because
# the current channel is already correct, this will be executed
# instead.
newepisodecommand=/opt/mythtv/bin/hdmirec_newep.sh hdmirec1 %CHANNUM%

# Timeout for changing channels in msecs
timeout=150000

[SCANNER]
# When MythTV scans for channels, The contents of the [TUNER/channels]
# config file are used to populate MythTV's channel information.
# If a command is provided here, it will be executed first, so it can
# populate the [TUNER/channels] config file
#command=/home/myth/bin/scan.sh "%CHANCONF%"

# Timeout for scan command in msecs
#timeout=60000
